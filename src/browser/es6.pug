html
  head
    meta(charset="utf-8")
    meta(http-equiv="x-ua-compatible", content="ie=edge")

    meta(name='description', content='rxcollection-subscriber Demo')
    meta(name='robots', content='all')

    link(rel='stylesheet', href='demo.css')

    script(src="https://unpkg.com/rxdb@latest/dist/rxdb.browserify.min.js" type="text/javascript")

    // mobx is a peer-dependency for rxcollection-subscribeer.
    // As it's a reactive library, you may want to use it elsewhere in your project too.
    script(src="https://unpkg.com/mobx@latest" type="text/javascript")

    //- script(src="https://unpkg.com/rxcollection-subscriber@latest" type="text/javascript")
    script(src="../../../documents/rxcollection-subscriber/dist/index.js" type="text/javascript")

    // This lib is being used to generate fake data and is not required at all.
    //- script(src="https://unpkg.com/faker@latest" type="text/javascript")
    script(src="https://cdn.rawgit.com/Marak/faker.js/master/examples/browser/js/faker.js" type="text/javascript")

    script.
      var db, s
      var schemas = [
        {
          name: 'users',
          schema: {
            title: 'user',
            version: 0,
            type: 'object',
            properties: {
              name: { type: 'string' },
              email: { type: 'string' },
              role: { type: 'number' },
              location: { type: 'string' },
              bio: { type: 'string' },
              level: { type: 'number' },
              avatar: { type: 'string' }
            },
            indexes: ['name', 'email', 'role', 'level'],
            required: ['name', 'email', 'role']
          }
        },
        {
          name: 'posts',
          schema: {
            title: 'post',
            version: 0,
            type: 'object',
            properties: {
              title: { type: 'string' },
              content: { type: 'string' },
              authors: { type: 'array', ref: 'users', items: { type: 'string' } },
              comments: { type: 'array', ref: 'comments', items: { type: 'string' } },
              likes: { type: 'number' },
              views: { type: 'number' }
            },
            indexes: ['title', 'views'],
            required: ['title', 'content', 'authors']
          }
        },
        {
          name: 'comments',
          schema: {
            title: 'comment',
            version: 0,
            type: 'object',
            properties: {
              content: { type: 'string' },
              postId: { type: 'string', ref: 'posts' },
              userId: { type: 'string', ref: 'users' }
            },
            required: ['content', 'userId', 'postId']
          }
        }
      ]

      RxDB.createRxDatabase({
        name: 'demo8',
        adapter: 'idb'
      }).then(d => {
        db = d;

        // Lets build our context object. This is helpful for relationships between subscribers sharing data
        // As we have 2 sections displaying, we'll use 2
        window.subscribers = {
          main: {},
          ui: {}
        }

        // For every collection
        schemas.map(schema => {
          db.collection(schema).then(col => {
            const { name } = schema

            let fields, criteria = {}, mapRefFields

            // Let's do some custom adjustments for our second renderers
            switch (name) {
              case 'users':
                criteria = { limit: 3, sort: { level: -1 } }
                fields = ['name', 'avatar', 'level']
                break

              case 'posts':
                criteria = { limit: 10 }
                fields = ['title', 'authors', 'views']
                mapRefFields = {
                  authors: 'authors.name'
                }
                break

              case 'comments':
                mapRefFields = {
                  userId: 'userId.name',
                  postId: 'postId.title'
                }
                break
            }


            db.waitForLeadership()
            .then(() => {
              const s = window.subscribers.main[name] = new Subscriber(col, { multipleSelect: name === 'users' })
              const s2 = window.subscribers.ui[name] = new Subscriber(col, { criteria, fields })

              db.requestIdlePromise().then(() => {
                // UI View
                s2.render({
                  name: name,
                  selector: `.ui .${name}`,
                  context: 'ui',
                  persistState: false,
                  holder: window.subscribers.ui,
                  mapRefFields
                })

                s.render({
                  name,
                  selector: `.${name}`,
                  asTable: true,
                  fields: 'all',
                  context: 'main',
                  controls: true,
                  holder: window.subscribers.main,
                  mapRefFields,
                  linkRefFields: true,
                  persistState: true // it's true by default, but for the sake of it :)
                })

              })
            });

          })
        })
      })

      window.addEventListener('unload', () => {
        if (db) db.destroy()
      })

      window.onpopstate = function(event) {
        console.log(`location: ${document.location}, state: ${JSON.stringify(event.state)}`)
      }

      // Check in 1 click if an item has been clicked and seelect it
      document.addEventListener('click', (e) => {
        const { target } = e
        const { parentNode } = target

        const li = target && target.dataset && target.dataset.id ?
          target :
          parentNode && parentNode.dataset && parentNode.dataset.id ?
            parentNode :
            parentNode.parentNode && parentNode.parentNode.dataset && parentNode.parentNode.dataset.id ?
              parentNode.parentNode : undefined
        if (!li) return

        const { dataset: { id } } = li
        if ( !id ) return

        const holder = target.closest('[data-sub]')
        if (!holder) return
        const { sub, ctx } = holder.dataset
        const subscriber = window.subscribers[ctx][sub]

        subscriber.select(id)
        const { selectedId } = subscriber
        if (typeof selectedId === 'object') {
          li.classList.toggle('sel', selectedId.indexOf(id) > -1)
        } else {
          Array.from(li.parentNode.children).forEach(child => child.classList.remove('sel'))
          if (selectedId.indexOf(id) === 0) li.classList.add('sel')
        }
      })

  body
    header
      h1 #[a(href="https://www.npmjs.com/package/rxcollection-subscriber") RxCollection Subscriber] HTML Example / Demo

    main#layout
      section
        h2 Overview

        .users
          h3 Users
          button.big(onclick="db.users.insert({ name: faker.name.findName(faker.name.firstName(), faker.name.lastName()), email: faker.internet.email(), level: faker.random.number({ min: 1, max: 70}), role: faker.random.number({ min: 1, max: 7}), location: faker.address.streetAddress(), avatar: faker.internet.avatar(), bio: faker.lorem.paragraph() });") Add new

        .posts
          h3 Posts
          button.big(onclick="db.posts.insert({ title: faker.lorem.sentence(), content: faker.lorem.paragraph(5), authors: subscribers.main.users.selectedId, views: faker.random.number({ min: 132, max: 970}), likes: faker.random.number({ min: 300, max: 10000}) });") Add new

        .comments
          h3 Comments
          button.big(onclick="db.comments.insert({ content: faker.lorem.paragraph(), userId: subscribers.main.users.selectedId[0], postId: subscribers.main.posts.selectedId });") Add new


      section.ui
        h2 UI view

        .posts
          h3 Most viewed today

        .users
          h3 Top posters

        .comments
          h3 Top comments

      #modal

    footer
