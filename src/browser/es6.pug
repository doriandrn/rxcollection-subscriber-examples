html
  head
    meta(charset="utf-8")
    meta(http-equiv="x-ua-compatible", content="ie=edge")

    meta(name='description', content='rxcollection-subscriber Demo')
    meta(name='robots', content='all')

    link(rel='stylesheet', href='demo.css')

    script(src="https://unpkg.com/rxdb@latest/dist/rxdb.browserify.min.js" type="text/javascript")

    // mobx is a peer-dependency for rxcollection-subscribeer.
    // As it's a reactive library, you may want to use it elsewhere in your project too.
    script(src="https://unpkg.com/mobx@latest" type="text/javascript")

    //- script(src="https://unpkg.com/rxcollection-subscriber@latest" type="text/javascript")
    script(src="../../../documents/rxcollection-subscriber/dist/index.js" type="text/javascript")

    // This lib is being used to generate fake data and is not required at all.
    //- script(src="https://unpkg.com/faker@latest" type="text/javascript")
    script(src="https://cdn.rawgit.com/Marak/faker.js/master/examples/browser/js/faker.js" type="text/javascript")

    script.
      var db, s
      var schemas = [
        {
          name: 'users',
          schema: {
            title: 'user',
            version: 0,
            type: 'object',
            properties: {
              name: { type: 'string' },
              email: { type: 'string' },
              role: { type: 'number' },
              location: { type: 'string' },
              bio: { type: 'string' },
              level: { type: 'number' },
              avatar: { type: 'string' }
            },
            indexes: ['name', 'email', 'role', 'level'],
            required: ['name', 'email', 'role']
          }
        },
        {
          name: 'posts',
          schema: {
            title: 'post',
            version: 0,
            type: 'object',
            properties: {
              title: { type: 'string' },
              content: { type: 'string' },
              authors: { type: 'array', ref: 'users', items: { type: 'string' } },
              comments: { type: 'array', ref: 'comments', items: { type: 'string' } },
              likes: { type: 'number' },
              views: { type: 'number' }
            },
            indexes: ['views']
          }
        },
        {
          name: 'comments',
          schema: {
            title: 'comment',
            version: 0,
            type: 'object',
            properties: {
              content: { type: 'string' },
              postId: { type: 'string', ref: 'posts', items: { type: 'string' } },
              userId: { type: 'string', ref: 'users', items: { type: 'string' } }
            }
          }
        }
      ]

      RxDB.createRxDatabase({
        name: 'demo3',
        adapter: 'idb'
      }).then(d => {
        db = d;
        window.subscribers = {}

        // For every collection
        schemas.map(schema => {
          db.collection(schema).then(col => {
            const s = window.subscribers[schema.name] = new Subscriber(col, { multipleSelect: schema.name === 'users' })

            s.render({
              selector: `.${schema.name}`,
              asTable: true,
              fields: 'all'
            })

            // UI View
            if (schema.name === 'users') {
              const s2 = window.subscribers[schema.name + 2] = new Subscriber(col, {
                criteria: { limit: 3, sort: { level: -1 } },
                fields: ['name', 'avatar', 'level']
              })
              s2.render({
                selector: '.ui .users'
              })
            }

          })
        })
      })

      window.addEventListener('unload', () => {
        if (db) db.destroy()
      })

      document.addEventListener('click', (e) => {
        const { target } = e
        const { parentNode } = target

        const li = target && target.dataset && target.dataset.id ?
          target :
          parentNode && parentNode.dataset && parentNode.dataset.id ?
            parentNode :
            parentNode.parentNode && parentNode.parentNode.dataset && parentNode.parentNode.dataset.id ?
              parentNode.parentNode : undefined
        if (!li) return

        const { dataset: { id } } = li
        if ( !id ) return

        const subscriberName = target.closest('[data-sub]').dataset.sub
        const subscriber = window.subscribers[subscriberName]
        //- console.log(`clicked item ${id} of ${subscriberName}`)
        subscriber.select(id)
        const { selectedId } = subscriber
        li.classList.toggle('sel', selectedId.indexOf(id) > -1)
      })

      // var s = new Subscriber

  body
    header
      h1 RxCollection Subscriber Example / Demo

    main#layout
      section
        h2 Overview

        .users
          h3 Users
          button.big(onclick="db.users.insert({ name: faker.name.findName(faker.name.firstName(), faker.name.lastName()), email: faker.internet.email(), level: faker.random.number({ min: 1, max: 70}), role: faker.random.number({ min: 1, max: 7}), location: faker.address.streetAddress(), avatar: faker.internet.avatar(), bio: faker.lorem.paragraph() });") Add new

        .posts
          h3 Posts

        .comments
          h3 Comments
          p empty

      section.ui
        h2 UI view

        .users
          h3 Top posters

    footer
